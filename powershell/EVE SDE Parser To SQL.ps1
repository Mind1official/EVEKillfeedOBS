# Load required module (if needed)
if (-not (Get-Module -ListAvailable -Name powershell-yaml)) {
    Install-Module -Name powershell-yaml -Scope CurrentUser -Force
}
Import-Module powershell-yaml

function Parse-YamlFile {
    param (
        [string]$FilePath
    )
    try {
        return ConvertFrom-Yaml (Get-Content $FilePath -Raw)
    }
    catch {
        Write-Warning "Failed to parse YAML file: $FilePath"
        return $null
    }
}

function Get-EveData {
    param (
        [string]$RootDir
    )

    $counter = 0
    $counterEnabled = $false
    $results = @()

    $yamlFiles = Get-ChildItem -Path $RootDir -Recurse -File -Filter '*.yaml'

    $currentRegionID = $null
    $currentConstellationID = $null

    foreach ($file in $yamlFiles) {
        if ($counter -ge 10 -and $counterEnabled) {
            Write-Host "Processed 10 files. Exiting for debug purposes."
            break
        }

        $yamlPath = $file.FullName
        Write-Host "Reading: $yamlPath"

        $folderName = Split-Path (Split-Path $yamlPath -Parent) -Leaf
        $yamlData = Parse-YamlFile -FilePath $yamlPath

        if ($null -eq $yamlData) { continue }

        $item = $null

        switch ($file.Name.ToLower()) {
            'region.yaml' {
                if ($yamlData.regionID) {
                    $currentRegionID = $yamlData.regionID
                    $item = [PSCustomObject]@{
                        Type        = 'Region'
                        Name        = $folderName
                        ID          = $yamlData.regionID
                        Path        = $yamlPath
                    }
                }
            }
            'constellation.yaml' {
                if ($yamlData.constellationID -and $currentRegionID) {
                    $currentConstellationID = $yamlData.constellationID
                    $item = [PSCustomObject]@{
                        Type        = 'Constellation'
                        Name        = $folderName
                        ID          = $yamlData.constellationID
                        RegionID    = $currentRegionID
                        Path        = $yamlPath
                    }
                }
            }
            'solarsystem.yaml' {
                if ($yamlData.solarSystemID -and $currentConstellationID -and $currentRegionID) {
                    $item = [PSCustomObject]@{
                        Type            = 'SolarSystem'
                        Name            = $folderName
                        ID              = $yamlData.solarSystemID
                        ConstellationID = $currentConstellationID
                        RegionID        = $currentRegionID
                        Path            = $yamlPath
                    }
                }
            }
        }

        if ($item) {
            $results += $item
            $counter++
        }
    }

    Write-Host "Returning $($results.Count) items."
    return $results
}

function Write-SqlInsertFile {
    param (
        [array]$Data,
        [string]$OutputPath = ".\insert_eve_data.sql"
    )

    $regionLines = @()
    $constellationLines = @()
    $systemLines = @()

    foreach ($item in $Data) {
        switch ($item.Type) {
            'Region' {
                $regionLines += "INSERT INTO wp_eve_regions (id, region_name) VALUES ($($item.ID), '$($item.Name)');"
            }
            'Constellation' {
                $constellationLines += "INSERT INTO wp_eve_constellations (id, constellation_name, region_id) VALUES ($($item.ID), '$($item.Name)', $($item.RegionID));"
            }
            'SolarSystem' {
                $systemLines += "INSERT INTO wp_eve_systems (id, system_name, constellation_id) VALUES ($($item.ID), '$($item.Name)', $($item.ConstellationID));"
            }
        }
    }

    $allLines = @(
        "-- SQL Dump generated by PowerShell"
        "-- Regions"
        $regionLines
        "`n-- Constellations"
        $constellationLines
        "`n-- Systems"
        $systemLines
    )

    $allLines | Out-File -Encoding UTF8 -FilePath $OutputPath -Force
    Write-Host "SQL dump written to $OutputPath"
}


# Example usage:
$rootPath = "c:\path\to\eve\sde\eve"
$result = Get-EveData -RootDir $rootPath
$result | Format-Table Type, Name, ID, Path
Write-SqlInsertFile -Data $result -OutputPath "c:\temp\eve_system_dump.sql"
